@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject SweetAlertService sweetAlertService
@inject IJSRuntime JS

@if (country is null)
{
    <div class="spinner">

    </div>
}
else
{
    <div class="mb-2">
        <a class="btn btn-sm rounded-pill btn-success" href="/countries"><i class="oi oi-loop-circular"></i> Return</a>
    </div>
    <div class="card">
        <div class="card-header">
            <span><i class="oi oi-globe text-primary"></i> @country.Name   <a class="btn btn-sm btn-primary rounded-pill float-end" href="/states/create/@country.Id"><i class="oi oi-plus"></i> New State</a></span>
        </div>
        <div class="card-body">
            <GenericList MyList="country.States!.ToList()">
                <Body>
                    <table id="myTable" class="table table-striped" >
                        <thead>
                            <tr>
                                <th>State / City</th>
                                <th>Cities</th>
                                <th>
                                    @*<a class="btn btn-sm btn-primary" href="/states/create/@country.Id"><i class="oi oi-plus"></i> New State</a>
                                        <a class="btn btn-sm btn-success" href="/countries"><i class="oi oi-loop-circular"></i> Return</a>*@
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var state in country.States!.ToList())
                            {
                                <tr>
                                    <td>
                                        @state.Name
                                    </td>
                                    <td>
                                        @state.CitiesNumber
                                    </td>
                                    <td>
                                        <a class="btn btn-sm rounded-pill btn-info text-white" href="/states/details/@state.Id"><i class="oi oi-list"></i> Details</a>
                                        <a class="btn btn-sm rounded-pill  btn-warning" href="/states/edit/@state.Id"><i class="oi oi-pencil"></i> Edit</a>
                                        <button class="btn btn-sm rounded-pill btn-danger" @onclick=@(() => DeleteAsync(state.Id))><i class="oi oi-trash"></i> Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>

        </div>
    </div>
}


@code {

    private Country? country;


    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JS.InvokeVoidAsync("InitTable");
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<Country>($"/api/countries/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        country = responseHttp.Response;

    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "Do you want to delete this record?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Yes"
        });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/states/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}

@page "/countries"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


@if (Countries is null)
{

    <div class="spinner"></div>
}
else
{
    <div class="card">
        <div class="card-header">
            Countries
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>

                        <th>País</th>
                        <th>Estados/Cities</th>
                        <th><a class="btn btn-sm btn-primary" href="/countries/create">Add Country</a></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var country in Countries!)
                    {
                        <tr>

                            <td>
                                @country.Name
                            </td>
                            <td>
                                @country.StatesNumber
                            </td>
                            <td>
                                <a class="btn btn-sm btn-warning" href="/countries/edit/@country.Id">Edit</a>
                                <button class="btn btn-sm btn-danger" @onclick=@(() => DeleteAsync(country.Id))>Del</button>
                            </td>
                            <td></td>
                        </tr>

                    }
                </tbody>
            </table>
        </div>
    </div>
}





@code {
    public List<Country>? Countries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<List<Country>>("/api/countries");
        Countries = responseHttp.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "Do you want to delete this country?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/countries/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}

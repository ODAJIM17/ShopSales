@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />


<div class="card">
    
    <div class="card-body">
        <EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label>Country:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@Country.Name" />
                    <ValidationMessage For="@(() => Country.Name)" />
                </div>
            </div>
            <button class="btn btn-sm btn-primary" type="submit"><i class="oi oi-plus"></i> Save Changes</button>
            <button class="btn btn-sm btn-success" @onclick="ReturnAction"><i class="oi oi-loop-circular"></i> Return</button>
        </EditForm>
    </div>
</div>


@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public Country Country { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(Country);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirm",
            Text = "Do you want to leave this page?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}


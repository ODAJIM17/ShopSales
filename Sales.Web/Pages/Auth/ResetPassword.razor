@layout AuthLayout
@page "/api/accounts/ResetPassword"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

@if (loading)
{
    <div class="spinner" />
}
<div class="container offset-4">
    <div class="row">
        <div class="col-6">
            <EditForm Model="resetPasswordDTO" OnValidSubmit="ChangePasswordAsync">
                <DataAnnotationsValidator />
                <div class="card">
                    <div class="card-header">
                        <span>
                            <i class="oi oi-key" /> Change Password
                            <button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-check" /> Change password</button>
                        </span>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="smfont">Email:</label>
                            <div>
                                <InputText class="form-control smfont" @bind-Value="@resetPasswordDTO.Email" />
                                <ValidationMessage For="@(() => resetPasswordDTO.Email)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="smfont">New Password:</label>
                            <div>
                                <InputText type="password" class="form-control smfont" @bind-Value="@resetPasswordDTO.Password" />
                                <ValidationMessage For="@(() => resetPasswordDTO.Password)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="smfont">Confirm Password:</label>
                            <div>
                                <InputText type="password" class="form-control smfont" @bind-Value="@resetPasswordDTO.ConfirmPassword" />
                                <ValidationMessage For="@(() => resetPasswordDTO.ConfirmPassword)" />
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>



@code {
    private ResetPasswordDTO resetPasswordDTO = new();
    private bool loading;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Token { get; set; } = "";

    private async Task ChangePasswordAsync()
    {
        loading = true;
        resetPasswordDTO.Token = Token;
        var responseHttp = await repository.Post("/api/accounts/ResetPassword", resetPasswordDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        loading = false;
        await sweetAlertService.FireAsync("Confirmation", "Password changed successfully. Proceed to login using your new password.", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/Login");
    }
}


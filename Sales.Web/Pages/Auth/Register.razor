@layout AuthLayout
@page "/Register"

@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService



<EditForm Model="userDTO" OnValidSubmit="CreteUserAsync">
    <DataAnnotationsValidator />
    <div class="container">
        <div class=" card">
            <div class="card-header">
                <h5><i class="oi oi-person"></i> Registration Form</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="smfontBold">First Name:</label>
                            <div>
                                <InputText class="form-control smfont" @bind-Value="@userDTO.FirstName" />
                                <ValidationMessage For="@(() => userDTO.FirstName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="smfontBold">Last Name:</label>
                            <div>
                                <InputText class="form-control smfont" @bind-Value="@userDTO.LastName" />
                                <ValidationMessage For="@(() => userDTO.LastName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="smfontBold">Document:</label>
                            <div>
                                <InputText class="form-control smfont" @bind-Value="@userDTO.Document" />
                                <ValidationMessage For="@(() => userDTO.Document)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="smfontBold">Phone:</label>
                            <div>
                                <InputText class="form-control smfont" @bind-Value="@userDTO.PhoneNumber" />
                                <ValidationMessage For="@(() => userDTO.PhoneNumber)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="smfontBold">Address:</label>
                            <div>
                                <InputText class="form-control smfont" @bind-Value="@userDTO.Address" />
                                <ValidationMessage For="@(() => userDTO.Address)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="smfontBold">Email:</label>
                            <div>
                                <InputText class="form-control smfont" @bind-Value="@userDTO.Email" />
                                <ValidationMessage For="@(() => userDTO.Email)" />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="smfontBold">Country:</label>
                            <div>
                                <select class="form-select smfont" @onchange="CountryChangedAsync">
                                    <option value="0">Select a country...</option>
                                    @if (countries is not null)
                                    {
                                        @foreach (var country in countries)
                                        {
                                            <option value="@country.Id">@country.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="smfontBold">State/Departament:</label>
                            <div>
                                <select class="form-select smfont" @onchange="StateChangedAsync">
                                    <option value="0">Select state...</option>
                                    @if (states is not null)
                                    {
                                        @foreach (var state in states)
                                        {
                                            <option value="@state.Id">@state.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="smfontBold">City:</label>
                            <div>
                                <select class="form-select smfont" @bind="userDTO.CityId">
                                    <option value="0">Select a city...</option>
                                    @if (cities is not null)
                                    {
                                        @foreach (var city in cities)
                                        {
                                            <option value="@city.Id">@city.Name</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => userDTO.CityId)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="smfontBold">Password:</label>
                            <div>
                                <InputText type="password" class="form-control smfont" @bind-Value="@userDTO.Password" />
                                <ValidationMessage For="@(() => userDTO.Password)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="smfontBold">Confirm Password:</label>
                            <div>
                                <InputText type="password" class="form-control smfont" @bind-Value="@userDTO.PasswordConfirm" />
                                <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <InputImg Label="Photo:" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                        </div>
                    </div>
                </div>
                <button class="btn btn-sm btn-primary" type="submit">Register</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private UserDTO userDTO = new();
    private List<Country>? countries;
    private List<State>? states;
    private List<City>? cities;
    private string? imageUrl;

    protected async override Task OnInitializedAsync()
    {
        await LoadCountriesAsync();
    }

    private void ImageSelected(string imagenBase64)
    {
        userDTO.Photo = imagenBase64;
        imageUrl = null;
    }


    private async Task LoadCountriesAsync()
    {
        var responseHttp = await repository.Get<List<Country>>("/api/countries/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        countries = responseHttp.Response;
    }


    private async Task CountryChangedAsync(ChangeEventArgs e)
    {
        var selectedCountry = Convert.ToInt32(e.Value!);
        await LoadStatesAsyn(selectedCountry);
    }

    private async Task LoadStatesAsyn(int countryId)
    {
        var responseHttp = await repository.Get<List<State>>($"/api/states/combo/{countryId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        states = responseHttp.Response;
    }


    private async Task StateChangedAsync(ChangeEventArgs e)
    {
        var selectedState = Convert.ToInt32(e.Value!);
        await LoadCitiesAsyn(selectedState);
    }



    private async Task LoadCitiesAsyn(int stateId)
    {
        var responseHttp = await repository.Get<List<City>>($"/api/cities/combo/{stateId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        cities = responseHttp.Response;
    }


    private async Task CreteUserAsync()
    {
        userDTO.UserName = userDTO.Email;
        userDTO.UserType = UserType.User;
        var responseHttp = await repository.Post<UserDTO, TokenDTO>("/api/accounts/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
    }
}
